(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,"* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nheader {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 40px;\n}\n\nmain {\n  display: flex;\n  height: calc(100vh - 80px);\n}\n\n.left,\n.right {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 50%;\n}\n\n.left-content,\n.right-content {\n  width: 95%;\n  height: 95%;\n  min-width: 250px;\n  min-height: 250px;\n  max-width: 600px;\n  max-height: 600px;\n}\n\n.player-info {\n  height: 10%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.cell {\n  border: 1px solid grey;\n}\n\n.board-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 90%;\n}\n\n.board {\n  aspect-ratio: 1;\n  height: min(45vw, 100%);\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  box-shadow: 0 0 4px black;\n}\n\n.hit {\n  background-color: red;\n}\n\n.miss {\n  background-color: blue;\n}\n\n.ship {\n  background-color: darkslategray;\n}\n\n.ship.hit {\n  background-color: red;\n}\n\nfooter {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 40px;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,0BAA0B;AAC5B;;AAEA;;EAEE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,UAAU;AACZ;;AAEA;;EAEE,UAAU;EACV,WAAW;EACX,gBAAgB;EAChB,iBAAiB;EACjB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,eAAe;EACf,uBAAuB;EACvB,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,yBAAyB;AAC3B;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,+BAA+B;AACjC;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;AACd",sourcesContent:["* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nheader {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 40px;\n}\n\nmain {\n  display: flex;\n  height: calc(100vh - 80px);\n}\n\n.left,\n.right {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 50%;\n}\n\n.left-content,\n.right-content {\n  width: 95%;\n  height: 95%;\n  min-width: 250px;\n  min-height: 250px;\n  max-width: 600px;\n  max-height: 600px;\n}\n\n.player-info {\n  height: 10%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.cell {\n  border: 1px solid grey;\n}\n\n.board-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 90%;\n}\n\n.board {\n  aspect-ratio: 1;\n  height: min(45vw, 100%);\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  box-shadow: 0 0 4px black;\n}\n\n.hit {\n  background-color: red;\n}\n\n.miss {\n  background-color: blue;\n}\n\n.ship {\n  background-color: darkslategray;\n}\n\n.ship.hit {\n  background-color: red;\n}\n\nfooter {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 40px;\n}\n"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],c=0;c<n.length;c++){var s=n[c],d=r.base?s[0]+r.base:s[0],l=o[d]||0,A="".concat(d," ").concat(l);o[d]=l+1;var p=t(A),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var h=a(u,r);r.byIndex=c,e.splice(c,0,{identifier:A,updater:h,references:1})}i.push(A)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var c=t(o[i]);e[c].references--}for(var s=r(n,a),d=0;d<o.length;d++){var l=t(o[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),r=t(795),a=t.n(r),o=t(569),i=t.n(o),c=t(565),s=t.n(c),d=t(216),l=t.n(d),A=t(589),p=t.n(A),u=t(426),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=i().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=l(),e()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;const f=n=>({length:n.length,coordinates:n,hitPositions:[],isSunk:!1,hit(n){this.hitPositions.push(n),this.checkSunkStatus()},checkSunkStatus(){this.hitPositions.length===this.coordinates.length&&(this.isSunk=!0)}}),m=()=>{const n=[],e=[],t=[];for(let n=0;n<10;n+=1){const t=[];for(let e=0;e<10;e+=1)t.push(`${n}-${e}`);e.push(t)}return{board:e,attacks:t,ships:n,placeShip:function(e,t){if(10-t.charAt(2)<e);else{let r=!1;const a=[],o=parseInt(t.charAt(0),10),i=parseInt(t.charAt(2),10);for(let n=0;n<e;n+=1)a.push(`${o}-${i+n}`);if(n.forEach((n=>{n.coordinates.some((n=>a.includes(n)))&&(r=!0)})),r);else{const e=f(a);n.push(e)}}},receiveAttack:function(e){if(t.indexOf(e)>=0)return"Can't attack same position more than once";let r=!1;return n.forEach((n=>{n.coordinates.forEach((t=>{t===e&&(n.hit(t),r=!0)}))})),t.push(e),r?"Hit":"Miss"},allShipsSunk:function(){let e=!0;return n.forEach((n=>{!1===n.isSunk&&(e=!1)})),e}}},g=[],E=n=>({name:n,board:m()}),b={player1Name:document.querySelector(".left-content>.player-info"),player1Board:document.querySelector(".left-content>.board-container>.board"),player2Name:document.querySelector(".right-content>.player-info"),player2Board:document.querySelector(".right-content>.board-container>.board")},y=n=>{n.board.ships.forEach((n=>{n.coordinates.forEach((n=>{b.player1Board.querySelector(`[data-coordinate='${n}']`).classList.add("ship")}))}))},B=n=>{g[1].board.receiveAttack(`${n.target.getAttribute("data-coordinate")}`);let e=!1;g[1].board.ships.forEach((t=>{t.coordinates.some((e=>e===`${n.target.getAttribute("data-coordinate")}`))&&(e=!0)})),e?n.target.classList.add("hit"):n.target.classList.add("miss"),g[1].board.allShipsSunk(),setTimeout((()=>{const n=(n=>{let e,t=!0;for(;t;)e=`${Math.floor(10*Math.random())}-${Math.floor(10*Math.random())}`,n.attacks.indexOf(e)<0&&(t=!1);return e})(g[0].board);g[0].board.receiveAttack(n),e=!1,g[0].board.ships.forEach((t=>{t.coordinates.some((e=>e===n))&&(e=!0)})),e?b.player1Board.querySelector(`[data-coordinate="${n}"]`).classList.add("hit"):b.player1Board.querySelector(`[data-coordinate="${n}"]`).classList.add("miss"),g[0].board.allShipsSunk()}),500)},C=n=>{switch(g[0].board.ships.length){default:return;case 0:g[0].board.placeShip(5,`${n.target.getAttribute("data-coordinate")}`),y(g[0]);break;case 1:g[0].board.placeShip(4,`${n.target.getAttribute("data-coordinate")}`),y(g[0]);break;case 2:case 3:g[0].board.placeShip(3,`${n.target.getAttribute("data-coordinate")}`),y(g[0]);break;case 4:g[0].board.placeShip(2,`${n.target.getAttribute("data-coordinate")}`),y(g[0])}5===g[0].board.ships.length&&b.player1Board.removeEventListener("click",C)};(()=>{for(;g.length>0;)g.pop();const n=E("player1"),e=E("cpu");g.push(n,e),((n,e)=>{b.player1Name.textContent=n.name,b.player2Name.textContent=e.name,b.player1Board.replaceChildren(),b.player2Board.replaceChildren(),n.board.board.forEach((n=>{n.forEach((n=>{const e=document.createElement("div");e.classList.add("cell"),e.setAttribute("data-coordinate",n),b.player1Board.appendChild(e)}))})),e.board.board.forEach((n=>{n.forEach((n=>{const e=document.createElement("div");e.classList.add("cell"),e.setAttribute("data-coordinate",n),b.player2Board.appendChild(e)}))}))})(n,e);const t=[5,4,3,3,2];for(let n=0;n<t.length;n+=1)for(;e.board.ships.length<n+1;)e.board.placeShip(t[n],`${Math.floor(10*Math.random())}-${Math.floor(10*Math.random())}`);b.player1Board.addEventListener("click",C),b.player2Board.addEventListener("click",B)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,